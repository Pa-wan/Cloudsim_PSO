package org.cloudbus.cloudsim.hust.contrast_test;

import java.util.HashMap;
import java.util.Vector;
import java.util.Map.Entry;

import org.cloudbus.cloudsim.hust.base.PhysicalMachine;
import org.cloudbus.cloudsim.hust.utils.Utils;
import org.cloudbus.cloudsim.hust.base.VirtualMachine;

//最佳适应算法
//选出能够放置，并且虚拟机与物理机剩余资源的夹角余弦值最小物理机进行存放
public class BestFit {
    Utils utils;
	
	//存放虚拟机到物理机上的映射，key=物理机，value=该物理机上虚拟机列表
	HashMap<Integer,Vector<Integer>>deployMap;
	
	//物理机资源的初始资源量，保存下来，便于计算负载不均衡度
	PhysicalMachine [] origin_pm;
	PhysicalMachine [] physicalMachine;
	VirtualMachine  [] virtualMachine;
	
	//归一化的资源
	PhysicalMachine [] pm_normalized;
	VirtualMachine  [] vm_normalized;


	
	public BestFit(PhysicalMachine [] pmArray,VirtualMachine  [] vmArray){
		//初始化
		utils=new Utils();
		this.physicalMachine=pmArray.clone();
		this.virtualMachine=vmArray.clone();
		this.origin_pm=pmArray.clone();
		this.deployMap=new HashMap<Integer,Vector<Integer>>();
		//对虚拟机进行归一化,虚拟机的归一化结果始终保持不变
		this.vm_normalized=getNormalized_Vm();
	}
	
	public void bestFit(){
		int index,size,key;
		Vector<Integer>value;
		 size=this.virtualMachine.length;
		 //没部署一次，就要对物理机的剩余资源进行更新，并对物理机的剩余资源进行重新归一化
		 for(index=0;index<size;index++){
			  //物理机下标
			  key=getbestFitIndex(index,this.virtualMachine[index],this.physicalMachine);
			  if(key!=-1){ //有通过bestFit获取的下标
				  //物理机对应的虚拟机列表
				  value=this.deployMap.get(key);
				  if(value==null)
					  value=new Vector<Integer>();
				  value.add(index);
				  this.deployMap.put(key,value);
			  }
		 }
		 
		 double loaddegree=getLoadDegree();
		 System.out.println("\n---------------------------------------------------------------------");
		 System.out.println("----------------------------【4】BestFit Algorithm---------------------");
		 System.out.println("-----------------------------------------------------------------------");
		 System.out.println("\nloadDegree="+loaddegree+"\n");
		 
		//数据中心的资源利用率
//		Utils.printUtilInfo(this.origin_pm, this.physicalMachine);
		 
		 System.out.println("----------------------------DeployMap----------------------------------");
		 for(Entry<Integer, Vector<Integer>> entry:this.deployMap.entrySet()){
			Integer key1=entry.getKey();
			Vector<Integer>value1=entry.getValue();
			 System.out.println("pm_index="+key1+"================"+"vm_index_set="+value1.toString());
		}
		
//		System.out.println("\n-------------------The Remaining PhysicalMachine Resource----------------");
//		for(index=0;index<physicalMachine.length;index++)
//			System.out.println(physicalMachine[index]);
		 

	}
	
	//对虚拟机和物理机的性能进行归一化，选择夹角余弦值的物理机进行部署
	public int getbestFitIndex(int index_vm,VirtualMachine vm,PhysicalMachine []pm){
		int size,index;
		int result_index=-1;  //表示找不到
		size=pm.length;
		//预先进行计算
		this.pm_normalized=getNormalized_Pm();
		//标志值，为寻找最小的距离匹配值，做比较使用
		double maxDistance=1;
		for(index=0;index<size;index++){
			//满足资源需求
			if(utils.canDeployDirectly(pm[index], vm)){
				//计算匹配距离，并与上次最好值进行比较
				double currDistance=getMatchDistance(this.pm_normalized[index],this.vm_normalized[index_vm]);
				if(currDistance<maxDistance){
					maxDistance=currDistance; //更新最大值
					result_index=index; //记录最优匹配下的物理机的下标
				}
			}
		}
		
		//修改物理机的剩余资源量
		if(result_index!=-1){
			double []array=utils.getDiffArray(pm[result_index], vm);
		    pm[result_index]=new PhysicalMachine(array);
		}
		
		return result_index;
	}
	
	//计算公式,负载不均衡度值在[0,1]之间
	public double getLoadDegree() {
		// 【1】求出每种资源R的平均资源利用率
		double sum_usedCpu, sum_usedMemory, sum_usedBandwidth, sum_usedDisk; // 每一类资源的总的剩余量
		double aveCpu, aveMemory, aveBandwidth, aveDisk; // 每一类资源的平均利用率
		sum_usedCpu = sum_usedMemory = sum_usedBandwidth = sum_usedDisk = 0.0; // 剩余资源累加计数器
		int index, size;
		size = this.origin_pm.length;

		for (index = 0; index < size; index++) {
			PhysicalMachine origin_resource, current_resource;
			origin_resource = this.origin_pm[index]; // 取出使用未使用过的物理机的状态
			// 【Bug_1】
			current_resource = this.physicalMachine[index]; // 取出使用了的物理机的状态。
			sum_usedCpu += (origin_resource.getCpu() - current_resource.getCpu())/origin_resource.getCpu();
			sum_usedMemory += (origin_resource.getMemory() - current_resource.getMemory())/origin_resource.getMemory();
			sum_usedBandwidth += (origin_resource.getBandwidth() - current_resource.getBandwidth())/origin_resource.getBandwidth();
			sum_usedDisk += (origin_resource.getDisk() - current_resource.getDisk())/origin_resource.getDisk();
		}
		aveCpu = sum_usedCpu /size; // CPU资源的平均利用率
		aveMemory = sum_usedMemory / size;// 内存的平均利用率
		aveBandwidth = sum_usedBandwidth / size;// 带宽资源的平均利用率
		aveDisk = sum_usedDisk / size;// 硬盘资源的平均利用率

		// 【2】再次遍历,求出负载不均衡度
		double per_usedCpu, per_usedMemory, per_usedBandwidth, per_usedDisk; // 每一类资源的剩余量
		per_usedCpu = per_usedMemory = per_usedBandwidth = per_usedDisk = 0;
		double currsum = 0;
		for (index = 0; index < size; index++) {
			PhysicalMachine origin_resource, current_resource;
			origin_resource = this.origin_pm[index]; // 取出使用未使用过的物理机的状态
			current_resource = this.physicalMachine[index]; // 取出使用了的物理机的状态。
			per_usedCpu = (origin_resource.getCpu() - current_resource.getCpu())/origin_resource.getCpu();
			per_usedMemory = (origin_resource.getMemory() - current_resource.getMemory())/origin_resource.getMemory();
			per_usedBandwidth = (origin_resource.getBandwidth() - current_resource.getBandwidth())/origin_resource.getBandwidth();
			per_usedDisk = (origin_resource.getDisk() - current_resource.getDisk())/origin_resource.getDisk();
			currsum += (Math.abs(per_usedCpu - aveCpu) + Math.abs(per_usedMemory - aveMemory)
					+ Math.abs(per_usedBandwidth - aveBandwidth) + Math.abs(per_usedDisk - aveDisk));
		}
		return currsum / size; // 求出负载不均衡度
	}
	
	/**
	 * 
	 * @return
	 */
	public PhysicalMachine [] getNormalized_Pm(){
		// 获取物理主机列表中各物理主机性能参数的最大值与最小值
		double[][] arrayA = PhysicalMachine.findMaxMin(physicalMachine);

		int size_pm, index;
		size_pm = physicalMachine.length;
		
		PhysicalMachine [] result_Pm=new PhysicalMachine [size_pm];

		// 进行归一化处理，将处理前和处理后的结果放在一个映射表中，方便记录原始数据和变化后的数据
		// 主机性能归一化
		for (index = 0; index < size_pm; index++) {
			PhysicalMachine ele = physicalMachine[index];
			double normalizedCPU = (ele.getCpu() - arrayA[1][0]) / (arrayA[0][0] - arrayA[1][0]);
			double normalizedMEM = (ele.getMemory() - arrayA[1][1]) / (arrayA[0][1] - arrayA[1][1]);
			double normalizedBandwidth = (ele.getBandwidth() - arrayA[1][2]) / (arrayA[0][2] - arrayA[1][2]);
			double normalizedDisksize = (ele.getDisk() - arrayA[1][3]) / (arrayA[0][3] - arrayA[1][3]);
			result_Pm[index] = new PhysicalMachine(normalizedCPU, normalizedMEM, normalizedBandwidth,
					normalizedDisksize);
		}
		return result_Pm;
	  }
	
	  public VirtualMachine [] getNormalized_Vm(){
		// 获取虚拟机列表中各虚拟机性能参数的最大值与最小值
		double[][] arrayB = VirtualMachine.findMaxMin(virtualMachine);

		int size_vm, index;
		size_vm = virtualMachine.length;
		
		VirtualMachine [] result_Vm=new VirtualMachine [size_vm];

		// 进行归一化处理，将处理前和处理后的结果放在一个映射表中，方便记录原始数据和变化后的数据
		// 虚拟机性能归一化
		for (index = 0; index < size_vm; index++) {
			VirtualMachine ele = virtualMachine[index];
			double normalizedCPU = (ele.getCpu() - arrayB[1][0]) / (arrayB[0][0] - arrayB[1][0]);
			double normalizedMEM = (ele.getMemory() - arrayB[1][1]) / (arrayB[0][1] - arrayB[1][1]);
			double normalizedBandwidth = (ele.getBandwidth() - arrayB[1][2]) / (arrayB[0][2] - arrayB[1][2]);
			double normalizedDisksize = (ele.getDisk() - arrayB[1][3]) / (arrayB[0][3] - arrayB[1][3]);
			result_Vm[index] = new VirtualMachine(normalizedCPU, normalizedMEM, normalizedBandwidth,
					normalizedDisksize);
		}
		return result_Vm;
	}
	 
	/**
	 * 
	 * @param pm_normalized 归一化的物理机资源
	 * @param vm_normalized 归一化的虚拟机资源
	 * @return  匹配距离值 ，匹配距离越小，越能满足性能需求
	 */
	public static double getMatchDistance(PhysicalMachine pm_normalized,VirtualMachine vm_normalized){
		double sum = 0; // 累加和
		double absdiff_1 = Math.abs(pm_normalized.getCpu() - vm_normalized.getCpu());
		double absdiff_2 = Math.abs(pm_normalized.getMemory() - vm_normalized.getMemory());
		double absdiff_3 = Math.abs(pm_normalized.getBandwidth() - vm_normalized.getBandwidth());
		double absdiff_4 = Math.abs(pm_normalized.getDisk() - vm_normalized.getDisk());
		sum += Math.pow(absdiff_1, 2.0) + Math.pow(absdiff_2, 2.0) + Math.pow(absdiff_3, 2.0)
				+ Math.pow(absdiff_4, 2.0);
		return Math.sqrt(sum)/2;
	}
	
	/**
	 * 
	 * @param pm_normalized 归一化的物理机资源
	 * @param vm_normalized 归一化的虚拟机资源
	 * @return 距离匹配矩阵，方便测试使用
	 */
	public double [][]getMatchDistanceMatrix(PhysicalMachine[] pm_normalized,VirtualMachine []vm_normalized){
		int size_pm,size_vm,indexIn,indexOut;
		size_pm=pm_normalized.length;
		size_vm=vm_normalized.length;
		double[][]array=new double[size_pm][size_vm];
		for(indexIn=0;indexIn<size_pm;indexIn++){
			for(indexOut=0;indexOut<size_vm;indexOut++)
				array[indexIn][indexOut]=getMatchDistance(pm_normalized[indexIn],vm_normalized[indexOut]);
		}
		return array;
	}
	
	/**
	 * 测试代码
	 * @param vector_1 物理机列表
	 * @param vector_2 虚拟机列表
	 */
	public void test_code(PhysicalMachine [] vector_1,VirtualMachine  [] vector_2){
		PhysicalMachine [] pms=getNormalized_Pm(vector_1);
		VirtualMachine [] vms= getNormalized_Vm(vector_2);
		System.out.println("\n---------------输出归一化的物理机---------------------------");
		printPm(pms);
		System.out.println("\n---------------输出归一化的虚拟机----------------------------");
		printVm(vms);
		System.out.println("\n---------------输出距离匹配矩阵------------------------------");
		printArray(getMatchDistanceMatrix(pms,vms));
	}
	
	/**
	 * 方便测试使用
	 * @param physicalMachine
	 * @return 
	 */
	public static PhysicalMachine [] getNormalized_Pm(PhysicalMachine [] physicalMachine){
		// 获取物理主机列表中各物理主机性能参数的最大值与最小值
		double[][] arrayA = PhysicalMachine.findMaxMin(physicalMachine);

		int size_pm, index;
		size_pm = physicalMachine.length;
		
		PhysicalMachine [] result_Pm=new PhysicalMachine [size_pm];

		// 进行归一化处理，将处理前和处理后的结果放在一个映射表中，方便记录原始数据和变化后的数据
		// 主机性能归一化
		for (index = 0; index < size_pm; index++) {
			PhysicalMachine ele = physicalMachine[index];
			double normalizedCPU = (ele.getCpu() - arrayA[1][0]) / (arrayA[0][0] - arrayA[1][0]);
			double normalizedMEM = (ele.getMemory() - arrayA[1][1]) / (arrayA[0][1] - arrayA[1][1]);
			double normalizedBandwidth = (ele.getBandwidth() - arrayA[1][2]) / (arrayA[0][2] - arrayA[1][2]);
			double normalizedDisksize = (ele.getDisk() - arrayA[1][3]) / (arrayA[0][3] - arrayA[1][3]);
			result_Pm[index] = new PhysicalMachine(normalizedCPU, normalizedMEM, normalizedBandwidth,
					normalizedDisksize);
		}
		return result_Pm;
	  }
	
	/**
	 * 方便测试使用
	 * @param virtualMachine
	 * @return
	 */
	  public VirtualMachine [] getNormalized_Vm(VirtualMachine [] virtualMachine){
		// 获取虚拟机列表中各虚拟机性能参数的最大值与最小值
		double[][] arrayB = VirtualMachine.findMaxMin(virtualMachine);

		int size_vm, index;
		size_vm = virtualMachine.length;
		
		VirtualMachine [] result_Vm=new VirtualMachine [size_vm];

		// 进行归一化处理，将处理前和处理后的结果放在一个映射表中，方便记录原始数据和变化后的数据
		// 虚拟机性能归一化
		for (index = 0; index < size_vm; index++) {
			VirtualMachine ele = virtualMachine[index];
			double normalizedCPU = (ele.getCpu() - arrayB[1][0]) / (arrayB[0][0] - arrayB[1][0]);
			double normalizedMEM = (ele.getMemory() - arrayB[1][1]) / (arrayB[0][1] - arrayB[1][1]);
			double normalizedBandwidth = (ele.getBandwidth() - arrayB[1][2]) / (arrayB[0][2] - arrayB[1][2]);
			double normalizedDisksize = (ele.getDisk() - arrayB[1][3]) / (arrayB[0][3] - arrayB[1][3]);
			result_Vm[index] = new VirtualMachine(normalizedCPU, normalizedMEM, normalizedBandwidth,
					normalizedDisksize);
		}
		return result_Vm;
	}
	
	public static void printArray(double [][]array){
		int in,out;
		for(in=0;in<array.length;in++){
			for(out=0;out<array[in].length;out++){
				System.out.print(array[in][out]+" ");
			}
			System.out.println();
		}
	}
	
	public static void printPm(PhysicalMachine [] physicalMachine){
		for(PhysicalMachine pm: physicalMachine)
			System.out.println(pm);
		
	}
	
	public static void printVm(VirtualMachine [] virtualMachine){
		for(VirtualMachine pm: virtualMachine)
			System.out.println(pm);
		
	}

}
