package org.cloudbus.cloudsim.provisioners;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Random;

import org.cloudbus.cloudsim.Host;
import org.cloudbus.cloudsim.Vm;
import org.cloudbus.cloudsim.VmAllocationPolicy;
import org.cloudbus.cloudsim.hust.aco.ACO;
import org.cloudbus.cloudsim.policy.ConstantConfig;
import org.cloudbus.cloudsim.policy.VmsToHosts.Main;

public class UtilProvisioner {
	private VmAllocationPolicy policy;
	private Map<Integer,double[]> util;//物理机真实资源利用率(即虚拟机负载动态变化)，以下如是
	private Map<Integer,Double> utilAvg;//单个物理机资源利用率
	private double avg[];//四维资源利用率
	private Map<Integer,Host> hostById;
	private Map<Host,LinkedList<double[]>> utilTs;//利用率时间序列
	private Map<Host,double[]> availableInTime;//物理机的实际剩余量
	public static final int capacity=6; //时间序列的长度
	private boolean flag=false;
	
	public UtilProvisioner(VmAllocationPolicy policy) {
		this.policy=policy;
		List<Host> hostList=policy.getHostList();
		util=new HashMap<Integer, double[]>();
		utilAvg=new HashMap<Integer, Double>();
		avg=new double[ConstantConfig.resNum];
		hostById=new HashMap<Integer, Host>();
		utilTs=new HashMap<Host, LinkedList<double[]>>();
		availableInTime=new HashMap<Host, double[]>();
		for(Host host:hostList){
			LinkedList<double[]> list=new LinkedList<double[]>();
			utilTs.put(host, list);
			availableInTime.put(host, new double[ConstantConfig.resNum]);
		}
		
	}
	
	public void updateUtil(){
		double sumCpu=0,sumMem=0,sumBw=0,sumStorage=0;
		List<Host> hostList=policy.getHostList();
		for(Host host:hostList){
			hostById.put(host.getId(), host);
			util.put(host.getId(), new double[ConstantConfig.resNum]);
			
			availableInTime.get(host)[0]=host.getTotalMips();
			availableInTime.get(host)[1]=host.getRam();
			availableInTime.get(host)[2]=host.getBw();
			availableInTime.get(host)[3]=Main.storageMap.get(host.getId());
			//为每个虚拟机产生随机的负载利用率(0~1)
			List<Vm> vmsInHost=host.getVmList();
			if(host.getId()%3!=0){
			  for(Vm vm:vmsInHost){
				List<Double> mips=new ArrayList<Double>();
				mips.add(vm.getNumberOfPes()*vm.getMips()*getRandomValue(vm));
				vm.setCurrentAllocatedMips(mips);
				vm.setCurrentAllocatedRam((int)(vm.getRam()*getRandomValue(vm)));
				vm.setCurrentAllocatedBw((long)(vm.getBw()*getRandomValue(vm)));
				vm.setCurrentAllocatedSize((long)(vm.getSize()*getRandomValue(vm)));
				
				availableInTime.get(host)[0]-=vm.getCurrentAllocatedMips().get(0);
				availableInTime.get(host)[1]-=vm.getCurrentAllocatedRam();
				availableInTime.get(host)[2]-=vm.getCurrentAllocatedBw();
				availableInTime.get(host)[3]-=vm.getCurrentAllocatedSize();
				}
			}else{
				Iterator<Vm> it=vmsInHost.iterator();
				while(it.hasNext()){
					Vm vm=it.next();
					if(vm.getId()%3==0&&flag){
						vmDestroy(vm,host);
						it.remove();
						vm.setHost(null);
					}else{
						List<Double> mips=new ArrayList<Double>();
						mips.add(vm.getNumberOfPes()*vm.getMips()*getRandomValue(vm));
						vm.setCurrentAllocatedMips(mips);
						vm.setCurrentAllocatedRam((int)(vm.getRam()*getRandomValue(vm)));
						vm.setCurrentAllocatedBw((long)(vm.getBw()*getRandomValue(vm)));
						vm.setCurrentAllocatedSize((long)(vm.getSize()*getRandomValue(vm)));
						
						availableInTime.get(host)[0]-=vm.getCurrentAllocatedMips().get(0);
						availableInTime.get(host)[1]-=vm.getCurrentAllocatedRam();
						availableInTime.get(host)[2]-=vm.getCurrentAllocatedBw();
						availableInTime.get(host)[3]-=vm.getCurrentAllocatedSize();
					}
				}
				flag=true;
			}
			util.get(host.getId())[0]=(host.getTotalMips()-availableInTime.get(host)[0])/host.getTotalMips();
			util.get(host.getId())[1]=(host.getRam()-availableInTime.get(host)[1])/(host.getRam()+0.0);
			util.get(host.getId())[2]=(host.getBw()-availableInTime.get(host)[2])/(host.getBw()+0.0);
			util.get(host.getId())[3]=(Main.storageMap.get(host.getId())-availableInTime.get(host)[3])/(Main.storageMap.get(host.getId())+0.0);
		
			sumCpu+=util.get(host.getId())[0];
			sumMem+=util.get(host.getId())[1];
			sumBw+=util.get(host.getId())[2];
			sumStorage+=util.get(host.getId())[3];
			
			double tempAvg=(util.get(host.getId())[0]+util.get(host.getId())[1]+util.get(host.getId())[2]+util.get(host.getId())[3])/4;
			utilAvg.put(host.getId(), tempAvg);			
			
			double[] tempUtil=new double[]{util.get(host.getId())[0],util.get(host.getId())[1],util.get(host.getId())[2],util.get(host.getId())[3]};
			//容量充足直接加入末尾，否则移除第一个
			if(utilTs.get(host).size()<capacity){
				utilTs.get(host).addLast(tempUtil);
			}else{
				utilTs.get(host).removeFirst();
				utilTs.get(host).addLast(tempUtil);
			}
		}
		avg[0]=sumCpu/(hostList.size());
		avg[1]=sumMem/(hostList.size());
		avg[2]=sumBw/(hostList.size());
		avg[3]=sumStorage/(hostList.size());
	}
	
	
	private void vmDestroy(Vm vm,Host host){
		host.getVmScheduler().deallocatePesForVm(vm);
		host.getRamProvisioner().deallocateRamForVm(vm);
		host.getBwProvisioner().deallocateBwForVm(vm);
		host.setStorage(host.getStorage()+vm.getSize());
		
		vm.setCurrentAllocatedBw(0);
		vm.setCurrentAllocatedMips(null);
		vm.setCurrentAllocatedRam(0);
		vm.setCurrentAllocatedSize(0);
	}
	private double getRandomValue(Vm vm){
		Random r=new Random();
		if(vm.getHost().getId()%3!=0)
			return 0.2*r.nextDouble();
		else
			return 1-0.2*r.nextDouble();
	}

	
	public Map<Integer, double[]> getUtil() {
		return util;
	}

	public void setUtil(Map<Integer, double[]> util) {
		this.util = util;
	}

	public Map<Integer, Double> getUtilAvg() {
		return utilAvg;
	}

	public void setUtilAvg(Map<Integer, Double> utilAvg) {
		this.utilAvg = utilAvg;
	}

	public double[] getAvg() {
		return avg;
	}

	public void setAvg(double[] avg) {
		this.avg = avg;
	}
	public void setHostById(Map<Integer, Host> hostById) {
		this.hostById = hostById;
	}	

    public Map<Integer, Host> getHostById() {
    	return hostById;
    }

	public Map<Host, LinkedList<double[]>> getUtilTs() {
		return utilTs;
	}

	public void setUtilTs(Map<Host, LinkedList<double[]>> utilTs) {
		this.utilTs = utilTs;
	}

	public VmAllocationPolicy getPolicy() {
		return policy;
	}

	public void setPolicy(VmAllocationPolicy policy) {
		this.policy = policy;
	}

	public Map<Host, double[]> getAvailableInTime() {
		return availableInTime;
	}

	public void setAvailableInTime(Map<Host, double[]> availableInTime) {
		this.availableInTime = availableInTime;
	}
	
	
	
}
