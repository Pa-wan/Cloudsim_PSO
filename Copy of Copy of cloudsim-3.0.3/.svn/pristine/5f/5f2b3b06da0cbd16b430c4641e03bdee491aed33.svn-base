package org.cloudbus.cloudsim.hust.acopso;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.TimeUnit;

import org.cloudbus.cloudsim.Host;
import org.cloudbus.cloudsim.Vm;


public class PSO {
	private Particle[] particles;//粒子
	private int particleNum;//粒子数量
	private List<Vm> vmList;//虚拟机列表
	private List<Host> hostList;//物理机列表
	public static double[] gbest;//粒子全局最优位置
	public static int MAX_GEN; // 运行代数
	private Map<String,ArrayList<Host>> allowed;//可以满足该虚拟机的物理机候选表
	private Map<Integer,Host> hostById;
	private Map<String,Vm> vmByUid;
	private Solution bestSolution;
	private double bestLoad;
	
	public PSO(Ant ant){
		this.particleNum=10;
		particles=new Particle[particleNum];
		this.vmList=ant.aco.getVmList();
		this.hostList=ant.aco.getHostList();
		this.MAX_GEN=200;
		bestLoad=ant.getBanlanceDegree();
		
		allowed=ant.aco.getAllowed();
		hostById=ant.aco.getHostById();
		vmByUid=ant.aco.getVmByUid();
		
		gbest=new double[vmList.size()];
		Iterator<Entry<String,Integer>> it=ant.getVmTohost().entrySet().iterator();
		Random random=new Random();
		while(it.hasNext()){
			Entry<String,Integer> entry=it.next();
			Host host=hostById.get(entry.getValue());
			Vm vm=vmByUid.get(entry.getKey());
			gbest[vm.getId()]=allowed.get(vm.getUid()).indexOf(host);
		}
		
		bestSolution=new Solution(ant.getBestLoad(),ant.getBanlanceDegree(),ant.getVmTohost());
		
		for(int i=0;i<particleNum;i++){
			  particles[i]=new Particle(vmList,hostList);
			  particles[i].init(allowed,ant.getVmTohost());
		}
		
	}
	
	public void solve(){
		int i=0;
		for(i=0;i<MAX_GEN;i++){
			
			Particle tempbest=null;
			for(int j=0;j<particleNum;j++){
				if(particles[j].getBanlanceDegree()<bestLoad){
					bestLoad=particles[j].getBanlanceDegree();
					tempbest=particles[j];
					
					Map<String,Integer> vmTohost=new HashMap<String, Integer>();
					Iterator<Entry<String,Integer>> it=particles[j].getVmTohost().entrySet().iterator();
					while(it.hasNext()){
						Entry<String,Integer> entry=it.next();
						vmTohost.put(entry.getKey(), entry.getValue());
					}
					bestSolution=new Solution(particles[j].getBestLoad(),particles[j].getBanlanceDegree(),vmTohost);
					System.out.println("pso:"+i+"  "+j+"  "+bestLoad);
				}
			}
			if(tempbest!=null){
				for(Vm vm:vmList){
					gbest[vm.getId()]=tempbest.getPos()[vm.getId()];
				}
			}
			ForkJoinPool forkJoinPool = new ForkJoinPool(); 
			 try {
			 forkJoinPool.submit(new ParallelParticle(0,particleNum,this));
			 forkJoinPool.shutdown();//两者顺序一定不能放反了
			 forkJoinPool.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);
			} catch (Exception e) {
				e.printStackTrace();
			}
//			for(int j=0;j<particleNum;j++){
//				particles[j].run();
//			}
		}
//		System.out.println("i="+i);
//		System.out.println(bestSolution.getVmTohost());
	}

	public Particle[] getParticles() {
		return particles;
	}

	public void setParticles(Particle[] particles) {
		this.particles = particles;
	}

	public Solution getBestSolution() {
		return bestSolution;
	}

	public void setBestSolution(Solution bestSolution) {
		this.bestSolution = bestSolution;
	}

	public Map<Integer, Host> getHostById() {
		return hostById;
	}

	public void setHostById(Map<Integer, Host> hostById) {
		this.hostById = hostById;
	}

	public Map<String, Vm> getVmByUid() {
		return vmByUid;
	}

	public void setVmByUid(Map<String, Vm> vmByUid) {
		this.vmByUid = vmByUid;
	}
	
	
	
}
